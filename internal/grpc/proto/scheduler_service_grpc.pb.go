// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal/grpc/proto/scheduler_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SchedulerService_PlaceSandbox_FullMethodName = "/prism.scheduler.v1.SchedulerService/PlaceSandbox"
)

// SchedulerServiceClient is the client API for SchedulerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SchedulerService provides gRPC methods for distributed sandbox placement
// and scheduling operations within the Prism cluster. Enables leader nodes
// to coordinate sandbox placement with worker nodes for optimal resource
// utilization and distributed code execution.
//
// This service handles the communication layer for the naive v0 scheduling
// implementation, supporting placement requests and status updates between
// cluster nodes for sandbox lifecycle management.
type SchedulerServiceClient interface {
	// PlaceSandbox requests a node to provision and start a sandbox VM
	// based on scheduling decisions made by the cluster leader. Returns
	// placement success or failure for sandbox lifecycle tracking.
	PlaceSandbox(ctx context.Context, in *PlaceSandboxRequest, opts ...grpc.CallOption) (*PlaceSandboxResponse, error)
}

type schedulerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerServiceClient(cc grpc.ClientConnInterface) SchedulerServiceClient {
	return &schedulerServiceClient{cc}
}

func (c *schedulerServiceClient) PlaceSandbox(ctx context.Context, in *PlaceSandboxRequest, opts ...grpc.CallOption) (*PlaceSandboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaceSandboxResponse)
	err := c.cc.Invoke(ctx, SchedulerService_PlaceSandbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServiceServer is the server API for SchedulerService service.
// All implementations must embed UnimplementedSchedulerServiceServer
// for forward compatibility.
//
// SchedulerService provides gRPC methods for distributed sandbox placement
// and scheduling operations within the Prism cluster. Enables leader nodes
// to coordinate sandbox placement with worker nodes for optimal resource
// utilization and distributed code execution.
//
// This service handles the communication layer for the naive v0 scheduling
// implementation, supporting placement requests and status updates between
// cluster nodes for sandbox lifecycle management.
type SchedulerServiceServer interface {
	// PlaceSandbox requests a node to provision and start a sandbox VM
	// based on scheduling decisions made by the cluster leader. Returns
	// placement success or failure for sandbox lifecycle tracking.
	PlaceSandbox(context.Context, *PlaceSandboxRequest) (*PlaceSandboxResponse, error)
	mustEmbedUnimplementedSchedulerServiceServer()
}

// UnimplementedSchedulerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchedulerServiceServer struct{}

func (UnimplementedSchedulerServiceServer) PlaceSandbox(context.Context, *PlaceSandboxRequest) (*PlaceSandboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceSandbox not implemented")
}
func (UnimplementedSchedulerServiceServer) mustEmbedUnimplementedSchedulerServiceServer() {}
func (UnimplementedSchedulerServiceServer) testEmbeddedByValue()                          {}

// UnsafeSchedulerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServiceServer will
// result in compilation errors.
type UnsafeSchedulerServiceServer interface {
	mustEmbedUnimplementedSchedulerServiceServer()
}

func RegisterSchedulerServiceServer(s grpc.ServiceRegistrar, srv SchedulerServiceServer) {
	// If the following call pancis, it indicates UnimplementedSchedulerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SchedulerService_ServiceDesc, srv)
}

func _SchedulerService_PlaceSandbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceSandboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServiceServer).PlaceSandbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerService_PlaceSandbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServiceServer).PlaceSandbox(ctx, req.(*PlaceSandboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchedulerService_ServiceDesc is the grpc.ServiceDesc for SchedulerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prism.scheduler.v1.SchedulerService",
	HandlerType: (*SchedulerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceSandbox",
			Handler:    _SchedulerService_PlaceSandbox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/proto/scheduler_service.proto",
}
